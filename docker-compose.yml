services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: Mtt
    ports:
      - "5432:5432"
    volumes:
      - ./scripts.sql:/docker-entrypoint-initdb.d/scripts.sql
      - postgres-data:/var/lib/postgresql/data 
    restart: always

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongo_data:/data/db
    restart: always

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always

  motorcycle:
    build:
      context: ./MotorcycleService
      dockerfile: MotorcycleService/Dockerfile
    container_name: motorcycle
    depends_on:
      - postgres
      - mongodb
      - rabbitmq
    ports:
      - "5001:80"
    restart: always

  rental:
    build:
      context: ./RentalMotorcycle
      dockerfile: RentalMotorcycle/Dockerfile
    container_name: rental
    depends_on:
      - postgres
      - mongodb
      - rabbitmq
    ports:
      - "5002:80"
    restart: always

  deliveryman:
    build:
      context: ./DeliveryPilots
      dockerfile: DeliveryPilots/Dockerfile
    container_name: deliveryman
    depends_on:
      - postgres
      - mongodb
      - rabbitmq
    ports:
      - "5003:80"
    restart: always

  bff:
    build:
      context: ./BFFService
      dockerfile: Dockerfile
    container_name: bff
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - motorcycle
      - rental
      - deliveryman
    ports:
      - "5004:8080"
    restart: always

  notification:
    build:
      context: ./NotificationService
      dockerfile: NotificationService/Dockerfile
    container_name: notification
    depends_on:
      - motorcycle
      - rental
      - deliveryman
      - rabbitmq
    ports:
      - "5005:80"
    restart: always

volumes:
 postgres-data:
 mongo_data:
